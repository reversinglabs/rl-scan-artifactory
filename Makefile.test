# Makefile tab=tab,ts=4
SHELL := /bin/bash
export SHELL

MIN_PYTHON_VERSION := $(shell basename $$( ls /usr/bin/python3.[0-9][0-9] | awk '{print $0; exit}' ) )
export MIN_PYTHON_VERSION

PIP_INSTALL := pip3 \
	--require-virtualenv \
	--disable-pip-version-check \
	--no-color install --no-cache-dir

VENV := ./vtmp/
export VENV

PROGRAM := rl-scan-artifactory-dev

ENV_FILE_PORTAL := ../.env_portal
ENV_FILE_CLI := ../.env_cli

DOWNLOAD_PATH := ./tmp2
export DOWNLOAD_PATH

WITH_TEST_LIMIT_REPO_TO := 5
export WITH_TEST_LIMIT_REPO_TO

# ----------------------------------------------
LOG_LEVEL := DEBUG
# LOG_LEVEL := INFO
# LOG_LEVEL := WARNING
export LOG_LEVEL

# ----------------------------------------------
REPOS_DEBIAN := ubuntu
REPOS_DOCKER := docker docker-local

REPOS_GENERIC := my-generic-local,my-release-candidates
REPOS_GENERIC := my-generic-local

REPOS_MVN := maven2-dev,maven2-local-dev
REPOS_NPM := nmpjs.org,npm-local
REPOS_NUGET := noget-dev-remote-mboot
REPOS_PYPI := pypi
REPOS_RPM := mboot-dev-fedora_epel-remote,mboot-dev-rockylinux-remote
REPOS_RUBY := rubygems-1

REPO_LIST_DEFAULT := \
	--repo $(REPOS_MVN) \
	--repo $(REPOS_NPM) \
	--repo $(REPOS_NUGET) \
	--repo $(REPOS_PYPI) \
	--repo $(REPOS_RPM) \
	--repo $(REPOS_RUBY) \
	--repo $(REPOS_DEBIAN)

REPO_LIST_FULL := \
	--repo  $(REPOS_DOCKER) \
	--repo $(REPOS_GENERIC) \
	$(REPO_LIST_DEFAULT)

REPO_LIST := $(REPO_LIST_FULL)

# ----------------------------------------------
SYNC := --sync --ignore-artifactory-properties

OPTIONS_TEST_COMMON := \
	--ignore-artifactory-properties \
	--verbose \
	--pack-safe \
	--ignore-cert-errors \
	--download=$(DOWNLOAD_PATH) \
	$(REPO_LIST)

# rl-store may not exist on test machines
CLI_COMMON := \
	--cli-rlstore-path=$$HOME/tmp/rl-secure \
	--cli-reports-repo="Spectra-Assure-Reports" \
	--cli-report-types=rl-json,rl-cve,rl-uri

CLI_OPTIONS := --cli $(CLI_COMMON) \
	--cli-rlsecure-path=$$HOME/tmp/rl-secure \

# cli-docker currenty as no sync possibility (fail on --sync)
CLI_DOCKER_OPTIONS := --cli-docker 	$(CLI_COMMON) \

OPTIONS_TEST_CLI := $(OPTIONS_TEST_COMMON) $(CLI_OPTIONS)

OPTIONS_TEST_CLI_DOCKER := $(OPTIONS_TEST_COMMON) $(CLI_DOCKER_OPTIONS)

OPTIONS_TEST_PORTAL := $(OPTIONS_TEST_COMMON) --portal

# ----------------------------------------------
COMMON_VENV := rm -rf $(VENV); \
	$(MIN_PYTHON_VERSION) -m venv $(VENV); \
	source ./$(VENV)/bin/activate;

COMMON_RUN := $(COMMON_VENV) \
	$(PIP_INSTALL) -r requirements.txt ; \
	$(MIN_PYTHON_VERSION)

# ----------------------------------------------
test: prep_test test_cli test_cli_docker test_portal

prep_test:
	mkdir -p $(DOWNLOAD_PATH)

test_cli:
	source $(ENV_FILE_CLI); \
	$(COMMON_RUN) $(PROGRAM).py $(OPTIONS_TEST_CLI) 2>$@.2 | tee $@.1
	mv $(PROGRAM).log $@.log

test_cli_docker:
	source $(ENV_FILE_CLI); \
	$(COMMON_RUN) $(PROGRAM).py $(OPTIONS_TEST_CLI_DOCKER) -I 2>$@.2 | tee $@.1
	mv $(PROGRAM).log $@.log

test_portal:
	source $(ENV_FILE_PORTAL); \
	$(COMMON_RUN) $(PROGRAM).py $(OPTIONS_TEST_PORTAL) 2>$@.2 | tee $@.1
	mv $(PROGRAM).log $@.log
