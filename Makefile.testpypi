# Makefile tab=tab,ts=4
SHELL := /bin/bash
export SHELL

# ==========================================
MIN_PYTHON_VERSION := $(shell basename $$( ls /usr/bin/python3.[0-9][0-9] | awk '{print $0; exit}' ) )
export MIN_PYTHON_VERSION

PIP_INSTALL := pip3 \
	--require-virtualenv \
	--disable-pip-version-check \
	--no-color install --no-cache-dir

VENV := ./vtmp/
export VENV

PACKAGE := rl-scan-artifactory
PACKAGE_VERSION := $(shell cat rl_scan_artifactory/version.py | awk '{gsub (/\"/,"",$$3); print $$3}' )
PROGRAM_AFTER_INSTALL := rl-scan-artifactory

ENV_FILE_PORTAL := ../.env_portal
ENV_FILE_CLI := ../.env_cli

# ==========================================
DOWNLOAD_PATH := ./tmp2
export DOWNLOAD_PATH

WITH_TEST_LIMIT_REPO_TO := 5
export WITH_TEST_LIMIT_REPO_TO

# ----------------------------------------------
LOG_LEVEL := DEBUG
# LOG_LEVEL := INFO
# LOG_LEVEL := WARNING
export LOG_LEVEL

# ----------------------------------------------
REPOS_DEBIAN := ubuntu
REPOS_DOCKER := docker docker-local

REPOS_GENERIC := my-generic-local,my-release-candidates
REPOS_GENERIC := my-generic-local

REPOS_MVN := maven2-dev,maven2-local-dev
REPOS_NPM := nmpjs.org,npm-local
REPOS_NUGET := noget-dev-remote-mboot
REPOS_PYPI := pypi
REPOS_RPM := mboot-dev-fedora_epel-remote,mboot-dev-rockylinux-remote
REPOS_RUBY := rubygems-1

REPO_LIST_DEFAULT := \
	--repo $(REPOS_MVN) \
	--repo $(REPOS_NPM) \
	--repo $(REPOS_NUGET) \
	--repo $(REPOS_PYPI) \
	--repo $(REPOS_RPM) \
	--repo $(REPOS_RUBY) \
	--repo $(REPOS_DEBIAN)

REPO_LIST_FULL := \
	--repo  $(REPOS_DOCKER) \
	--repo $(REPOS_GENERIC) \
	$(REPO_LIST_DEFAULT)

REPO_LIST := $(REPO_LIST_FULL)

# ----------------------------------------------
# SYNC := --ignore-artifactory-properties
SYNC := --sync --ignore-artifactory-properties

OPTIONS_TEST_COMMON := -I \
	--verbose \
	--pack-safe \
	--ignore-cert-errors \
	--download=$(DOWNLOAD_PATH) \
	$(REPO_LIST)

# note: rl-store may not exist on test machines
CLI_COMMON := \
	--cli-rlstore-path=$$HOME/tmp/rl-secure \
	--cli-reports-repo="Spectra-Assure-Reports" \
	--cli-report-types=rl-json,rl-cve,rl-uri

CLI_OPTIONS := --cli $(CLI_COMMON) \
	--cli-rlsecure-path=$$HOME/tmp/rl-secure \

CLI_DOCKER_OPTIONS := --cli-docker $(CLI_COMMON) \

OPTIONS_TEST_PORTAL := $(OPTIONS_TEST_COMMON) --portal

OPTIONS_TEST_CLI := $(OPTIONS_TEST_COMMON) $(CLI_OPTIONS)

OPTIONS_TEST_CLI_DOCKER := $(OPTIONS_TEST_COMMON) $(CLI_DOCKER_OPTIONS)

COMMON_VENV := rm -rf $(VENV); \
	$(MIN_PYTHON_VERSION) -m venv $(VENV); \
	source ./$(VENV)/bin/activate;

# to find normal dependencies with testpypi,
# use the extra index '--extra-index-url https://pypi.org/simple'
PREP_INSTALL_TESTPYPI := $(PIP_INSTALL) \
	--index-url https://test.pypi.org/simple/ \
	--extra-index-url https://pypi.org/simple \
	$(PACKAGE)==$(PACKAGE_VERSION)

# test exist: https://test.pypi.org/project/$(PACKAGE)/$(PACKAGE_VERSION)/
# ====================================
all: with_testpypi

with_testpypi: \
	publish_testpypi \
	prep_test \
	testpypi_test_cli \
	testpypi_test_cli_docker \
	testpypi_test_portal

prep_test:
	mkdir -p $(DOWNLOAD_PATH)

test_pypi_clean:
	-pip3 uninstall $(PACKAGE) -y

makeStubs:
	rm -rf stubs out */*.pyi */*/*.pyi
	mkdir stubs
	stubgen $(PACKAGE_NAME) -o stubs

build: makeStubs
	rm -rf dist/
	$(COMMON_VENV) \
	$(PIP_INSTALL) build; \
	$(MIN_PYTHON_VERSION) -m build;
	ls -l dist

publish_testpypi: build
	$(COMMON_VENV) \
	$(PIP_INSTALL) twine; \
	twine upload \
		--config-file=$${HOME}/.pypirc_testing \
		--repository=testpypi \
		dist/*;
	sleep 300

testpypi_test_cli: test_pypi_clean
	source $(ENV_FILE_CLI); \
	$(COMMON_VENV) \
	$(PREP_INSTALL_TESTPYPI); \
	$(PROGRAM_AFTER_INSTALL) -V; # show version ; \
	export LOG_LEVEL=DEBUG;	$(PROGRAM_AFTER_INSTALL) $(OPTIONS_TEST_CLI) 2>$@.2 | tee $@.1
	mv $(PROGRAM_AFTER_INSTALL).log $@.log

testpypi_test_cli_docker: test_pypi_clean
	source $(ENV_FILE_CLI); \
	$(COMMON_VENV) \
	$(PREP_INSTALL_TESTPYPI); \
	$(PROGRAM_AFTER_INSTALL) -V; # show version ; \
	export LOG_LEVEL=DEBUG;	$(PROGRAM_AFTER_INSTALL) $(OPTIONS_TEST_CLI_DOCKER) 2>$@.2 | tee $@.1
	mv $(PROGRAM_AFTER_INSTALL).log $@.log

testpypi_test_portal: test_pypi_clean
	source $(ENV_FILE_PORTAL); \
	$(COMMON_VENV) \
	$(PREP_INSTALL_TESTPYPI); \
	$(PROGRAM_AFTER_INSTALL) -V; # show version ; \
	export LOG_LEVEL=DEBUG;	$(PROGRAM_AFTER_INSTALL) $(OPTIONS_TEST_PORTAL) 2>$@.2 | tee $@.1
	mv $(PROGRAM_AFTER_INSTALL).log $@.log
